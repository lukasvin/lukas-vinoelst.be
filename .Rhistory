validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.ervec[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE)
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,])
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE)
}
#gemiddelde error-rate van 50 opdelingen
lda.er = mean(lda.ervec)
qda.er = mean(qda.ervec)
lda.ervec = c(1:50)
qda.ervec = c(1:50)
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.ervec[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE)
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,])
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE)
}
#gemiddelde error-rate van 50 opdelingen
lda.er = mean(lda.ervec)
qda.er = mean(qda.ervec)
lda.ervec = c(1:50)
qda.ervec = c(1:50)
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.ervec[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE)
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,])
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE)
}
#gemiddelde error-rate van 50 opdelingen
lda.er = mean(lda.ervec)
qda.er = mean(qda.ervec)
lda.ervec = c(1:50)
qda.ervec = c(1:50)
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.ervec[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE)
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,])
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE)
}
#gemiddelde error-rate van 50 opdelingen
lda.er = mean(lda.ervec)
qda.er = mean(qda.ervec)
max_k = 78;
resultaten = cbind(APER=NULL,LOOV=NULL,CV=NULL);
klijst = 1:max_k;
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
APER=aer(V1,knn(wijnScaledSp, wijnScaledSp, V1, k),FALSE),
LOOV=aer(V1,knn.cv(wijnScaledSp,V1,k),FALSE),
CV=aer(V1[validate],knn(wijnScaledSp[train,],wijnScaledSp[validate,],V1[train],k),FALSE)
))
}
head(resultaten)
plot(c(0,78),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=lda.er, col = "blueviolet"); abline(h=qda.er, col="chartreuse")
matplot(1:78,resultaten,type='l',add=TRUE)
resultaten
#Loov geeft beste resultaten maar ik denk dat er in de opdracht specifiek verwacht wordt dat we CV doen met de train, en validate/test sets
#voor CV: 3, 5 en 16 neighbours geeft abs minimum
best_k = wich.min(resultaten[,3])
best_k = which.min(resultaten[,3])
best_k
resultaten[,3]
lda.ervec.val = c(1:50);
lda.ervec.test = c(1:50);
qda.ervec = c(1:50);
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.pred.test <- predict(wijn.lda, wijnScaledSp[test,]);
lda.ervec.val[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE);
lda.ervec.test[i] = aer(wijnScaledSp$V1[test],lda.pred.test$class,conf=FALSE);
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,]);
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE);
}
#gemiddelde error-rates van 50 opdelingen
lda.er.val = mean(lda.ervec.val);lda.er.val
lda.er.test = mean(lda.ervec.test);lda.er.test
qda.er = mean(qda.ervec);qda.er
##----------------------------------------------------------------------
#k-nearest-neighboursmethode
#zoek k met kleinste error rate
max_k = 78;
resultaten = cbind(APER=NULL,LOOV=NULL,CV=NULL);
klijst = 1:max_k;
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
APER=aer(V1,knn(wijnScaledSp, wijnScaledSp, V1, k),FALSE),
LOOV=aer(V1,knn.cv(wijnScaledSp,V1,k),FALSE),
CV=aer(V1[validate],knn(wijnScaledSp[train,],wijnScaledSp[validate,],V1[train],k),FALSE)
))
}
plot(c(0,78),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=lda.er, col = "blueviolet"); abline(h=qda.er, col="chartreuse")
matplot(1:78,resultaten,type='l',add=TRUE)
best_k = which.min(resultaten[,3])
resultaten
lda.er.test #al berekend in vorige sectie
CV=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE); CV
lda.ervec.val = c(1:50);
lda.ervec.test = c(1:50);
qda.ervec = c(1:50);
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.pred.test <- predict(wijn.lda, wijnScaledSp[test,]);
lda.ervec.val[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE);
lda.ervec.test[i] = aer(wijnScaledSp$V1[test],lda.pred.test$class,conf=FALSE);
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,]);
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE);
}
library(MASS)
library(class)
wijn <- read.csv("wijn.csv", header=FALSE, sep = ",")
attach(wijn)
summary(wijn)
aer = function(y1,y2,conf=TRUE) {
confusion = table(y1,y2)
if (conf) {print(confusion)}
observaties = sum(confusion)
verkeerd = observaties-sum(diag(confusion))
verkeerd/observaties
}
lda.ervec.val = c(1:50);
lda.ervec.test = c(1:50);
qda.ervec = c(1:50);
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.pred.test <- predict(wijn.lda, wijnScaledSp[test,]);
lda.ervec.val[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE);
lda.ervec.test[i] = aer(wijnScaledSp$V1[test],lda.pred.test$class,conf=FALSE);
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,]);
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE);
}
#gemiddelde error-rates van 50 opdelingen
lda.er.val = mean(lda.ervec.val);lda.er.val
lda.er.test = mean(lda.ervec.test);lda.er.test
qda.er = mean(qda.ervec);qda.er
max_k = 78;
resultaten = cbind(CV=NULL);
klijst = 1:max_k;
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
CV=aer(V1[validate],knn(wijnScaledSp[train,],wijnScaledSp[validate,],V1[train],k),FALSE)
))
}
head(resultaten)
plot(c(0,78),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=lda.er, col = "blueviolet"); abline(h=qda.er, col="chartreuse")
matplot(1:78,resultaten,type='l',add=TRUE)
best_k = which.min(resultaten[,3])
resultaten
lda.er.test #al berekend in vorige sectie
CV=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE); CV
lda.er.test #al berekend in vorige sectie
CV=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE); CV
lda.er.test #al berekend in vorige sectie
CV=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE); CV
lda.er.test #al berekend in vorige sectie
CV.test.ervec = c(1:50)
for (j in 1:50) {
CV.test.ervec[j]=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE);
}
CV.er.test = mean(CV.ervec); CV.er.test
lda.er.test #al berekend in vorige sectie
CV.test.ervec = c(1:50)
for (j in 1:50) {
CV.test.ervec[j]=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE);
}
CV.er.test = mean(CV.test.ervec); CV.er.test
lda.er.test #al berekend in vorige sectie
CV.test.ervec = c(1:50)
for (j in 1:50) {
CV.test.ervec[j]=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE);
}
#gemiddelde error rate van 50
CV.er.test = mean(CV.test.ervec); CV.er.test
lda.er.test #al berekend in vorige sectie
CV.test.ervec = c(1:50)
for (j in 1:50) {
CV.test.ervec[j]=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE);
}
#gemiddelde error rate van 50
CV.er.test = mean(CV.test.ervec); CV.er.test
lda.er.test #al berekend in vorige sectie
CV.test.ervec = c(1:50)
for (j in 1:50) {
CV.test.ervec[j]=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE);
}
#gemiddelde error rate van 50
CV.er.test = mean(CV.test.ervec); CV.er.test
lda.er.test #al berekend in vorige sectie
CV.test.ervec = c(1:50)
for (j in 1:50) {
CV.test.ervec[j]=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE);
}
#gemiddelde error rate van 50
CV.er.test = mean(CV.test.ervec); CV.er.test
lda.er.test #al berekend in vorige sectie
CV.test.ervec = c(1:50)
for (j in 1:50) {
CV.test.ervec[j]=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE);
}
#gemiddelde error rate van 50
CV.er.test = mean(CV.test.ervec); CV.er.test
lda.er.test #al berekend in vorige sectie
CV.test.ervec = c(1:50)
for (j in 1:50) {
CV.test.ervec[j]=aer(V1[test],knn(wijnScaledSp[train,],wijnScaledSp[test,],V1[train],best_k),FALSE);
}
#gemiddelde error rate van 50
CV.er.test = mean(CV.test.ervec); CV.er.test
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.pred.test <- predict(wijn.lda, wijnScaledSp[test,]);
lda.ervec.val[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE);
lda.ervec.test[i] = aer(wijnScaledSp$V1[test],lda.pred.test$class,conf=FALSE);
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,]);
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE);
}
#gemiddelde error-rates van 50 opdelingen
lda.er.val = mean(lda.ervec.val);lda.er.val
lda.er.test = mean(lda.ervec.test);lda.er.test
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.pred.test <- predict(wijn.lda, wijnScaledSp[test,]);
lda.ervec.val[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE);
lda.ervec.test[i] = aer(wijnScaledSp$V1[test],lda.pred.test$class,conf=FALSE);
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,]);
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE);
}
#gemiddelde error-rates van 50 opdelingen
lda.er.val = mean(lda.ervec.val);lda.er.val
lda.er.test = mean(lda.ervec.test);lda.er.test
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.pred.test <- predict(wijn.lda, wijnScaledSp[test,]);
lda.ervec.val[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE);
lda.ervec.test[i] = aer(wijnScaledSp$V1[test],lda.pred.test$class,conf=FALSE);
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,]);
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE);
}
#gemiddelde error-rates van 50 opdelingen
lda.er.val = mean(lda.ervec.val);lda.er.val
lda.er.test = mean(lda.ervec.test);lda.er.test
for (i in 1:50) {
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
##-----------------------------------------------------------------------
#determinantmethode
#lineair
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train);
lda.pred.val <- predict(wijn.lda, wijnScaledSp[validate,]);
lda.pred.test <- predict(wijn.lda, wijnScaledSp[test,]);
lda.ervec.val[i] = aer(wijnScaledSp$V1[validate],lda.pred.val$class,conf=FALSE);
lda.ervec.test[i] = aer(wijnScaledSp$V1[test],lda.pred.test$class,conf=FALSE);
#quadratisch
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred.val <- predict(wijn.qda, wijnScaledSp[validate,]);
qda.ervec[i] = aer(wijnScaledSp$V1[validate],qda.pred.val$class,conf=FALSE);
}
#gemiddelde error-rates van 50 opdelingen
lda.er.val = mean(lda.ervec.val);lda.er.val
lda.er.test = mean(lda.ervec.test);lda.er.test
plot(c(0,78),c(0,1),main="Error rate in function of neighbours",xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=lda.er, col = "blueviolet"); abline(h=qda.er, col="chartreuse")
matplot(1:78,resultaten,type='l',add=TRUE)
legend(x, y=NULL, legend=c('knn','lda','qda'), col=c("black","blueviolet","chartreuse"))
plot(c(0,78),c(0,1),main="Error rate in function of neighbours",xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=lda.er, col = "blueviolet"); abline(h=qda.er, col="chartreuse")
matplot(1:78,resultaten,type='l',add=TRUE)
legend(x=0, y=0.8, legend=c('knn','lda','qda'), col=c("black","blueviolet","chartreuse"))
plot(c(0,78),c(0,1),main="Error rate in function of neighbours",xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=lda.er, col = "blueviolet"); abline(h=qda.er, col="chartreuse")
matplot(1:78,resultaten,type='l',add=TRUE)
legend(x=0, y=0.8, legend=c('knn','lda','qda'), fill=c("black","blueviolet","chartreuse"))
scaledRot = wijnScaled.pca$rotation;
View(scaledRot)
summary(wijnScaled.pca)
plot(wijnScaled.pca)
screeplot(wijnScaled.pca)
screeplot(wijnScaled.pca)
plot(wijnScaled.pca)
library(ggfortify)
library(devtools)
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
library(devtools)
##-------------------------------------------------------------------------
#!change working directory!
#Data Inladen
install.packages(devtools)
##-------------------------------------------------------------------------
#!change working directory!
#Data Inladen
install.packages("devtools")
install.packages("ggfortify")
library(ggfortify)
install_github("vqv/ggbiplot2")
library(devtools)
install_github("vqv/ggbiplot2")
install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot")
library(ggbiplot2)
library(ggbiplot)
install.packages("ggbipplot2")
install.packages("ggbiplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(MASS)
library(class)
library(ggplot2)
library(ggfortify)
install.packages("Rcpp")
library(ggplot2)
library(ggfortify)
attach(wijn)
#geschaalde PCA maken [waarschijnlijk best aangezien geen eenheden gegeven worden]
wijnScaled.pca = prcomp(wijnScaled,scale=TRUE);
plot(wijnScaled.pca,xlab = c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10","PC11","PC12","PC13"))
plot(wijnScaled.pca)
autoplot(wijnScaled.pca)
autoplot(wijnScaled.pca,colour = V1)
autoplot(wijnScaled.pca,colour = 'V1')
autoplot(wijnScaled.pca,colour = V1)
autoplot(wijnScaled.pca,data = wijnScaledSp,colour = V1)
help(autoplot.prcomp)
plot(wijnScaled.pca)
autoplot(wijnScaled.pca,data = wijnScaledSp,x=1,y=2,colour = V1)
summary(wijnScaled.pca)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1,label= TRUE)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=4,y=5,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=3,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=4,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=5,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=1,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=3,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=4,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=5,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=1,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=2,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=4,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=5,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=4,y=1,colour = V1)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1); legend(legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("red","green","black"))
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1); legend(x = 0.1,legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("red","green","black"))
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1); legend(x = 0.1,y = -0.1,legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("red","green","black"))
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1); legend(x = 0.1,y = 0,legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("red","green","black"))
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1); legend(x = 0,y = 0,legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("red","green","black"))
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1,label = TRUE); legend(x = 0,y = 0,legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("red","green","black"))
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = V1,label = TRUE); legend(x = 0,y = 0,legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("black","red","green"))
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = "V1",label = TRUE); legend(x = 0,y = 0,legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("black","red","green"))
wijnScaledSP$V1
wijnScaledSP$V1
wijnScaledSp$V1
wijnScaledSp$V1 <- as.character(wijnScaled$V1)
wijnScaledSp$V1 <- as.character(wijnScaledSp$V1)
wijnScaled
wijnScaledSP
wijnScaledSp
#Data schalen
wijnScaled = scale(wijn[,2:14]);
#extra col met de druifsoorten
wijnScaledSp = wijn;wijnScaledSp[,2:14] = wijnScaled;
wijnScaledSp$V1 <- as.character(wijnScaledSp$V1)
wijnScaledSp
wijnScaledSp$V1
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = "V1",label = TRUE); legend(x = 0,y = 0,legend=c('Druifsoort 1','Druifsoort 2','Druifsoort 3'), fill=c("black","red","green"))
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = "V1");
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=3,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = "V1") #interessant
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=3,colour = "V1") #interessant
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=4,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=5,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=1,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=3,colour = "V1") #
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=4,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=5,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=1,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=2,colour = "V1") #
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=4,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=5,colour = "V1") #interessant voor PC1 en PC2
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=5,colour = "V1") #niet interessant
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=5,colour = "V1") #niet interessant
autoplot(wijnScaled.pca, data = wijnScaledSp, x=4,y=1,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=4,y=2,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=4,colour = "V1") #niet interessant
autoplot(wijnScaled.pca, data = wijnScaledSp, x=4,y=3,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=4,y=5,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=5,y=3,colour = "V1")
autoplot(wijnScaled.pca, data = wijnScaledSp, x=5,y=4,colour = "V1")
biplot(wijnScaled.pca)
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = "V1",loadings=TRUE, loadings.label=TRUE) #interessant voor PC1 en PC2
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC1 en PC2
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=3,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC1
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=4,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant  voor PC1
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=5,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant  voor PC1
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=1,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC1 en PC2
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=3,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC2
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=4,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC2
autoplot(wijnScaled.pca, data = wijnScaledSp, x=2,y=5,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC2
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=1,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC1
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=2,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC2
autoplot(wijnScaled.pca, data = wijnScaledSp, x=3,y=4,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #niet interessant
autoplot(wijnScaled.pca, data = wijnScaledSp, x=1,y=2,colour = "V1",loadings=TRUE, loadings.label=TRUE, loadings.colour = "blueviolet") #interessant voor PC1 en PC2
#plotjes
screeplot(wijnScaled.pca)
